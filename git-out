#!/bin/bash -e
#
# git-out
#
# License: MIT
# Copyright (c) 2012 Lennart C. L. Kats

QUIET=
if [ "$1" == "-q" ]; then
  QUIET=-q
  shift
fi

FETCHED=
FETCHERS=
NO_FETCH=
if [ "$1" == "-f" ]; then
  NO_FETCH=-f
  shift
fi

QUIET=
if [ "$1" == "-q" ]; then
  QUIET=-q
  shift
fi

SELECTION="$@"

if echo "$SELECTION" | grep -iE 'head|local' >/dev/null; then
  SELECTION=`git-get-branch`
fi

BRANCHES=`git branch --list $SELECTION | sed 's/\* //'`

if BRANCH=`git-get-branch`; then
  BRANCHES="$BRANCH `echo "$BRANCHES" | grep -Ev "^$BRANCH\$"`"
fi

function clearLine() {
    echo -ne '\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b'
    echo -ne '\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b'
    echo -ne '\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b'
    echo -ne '\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b'
    echo -ne '                                                            '
    echo -ne '                                                            '
    echo -ne '\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b'
    echo -ne '\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b'
    echo -ne '\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b'
    echo -ne '\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b'
}

if [ ! $NO_FETCH ]; then
  git fetch -q origin &
  FETCHER=$!
fi

DID_PRIVATES=
for BRANCH in $BRANCHES; do
  if echo $BRANCH | grep '^_' >/dev/null || [ "$BRANCH" == "(no" ] ||
     [ "$BRANCH" == "branch)" ]; then
    continue
  fi
  if ! git show origin/$BRANCH &> /dev/null; then
    LOG=`git log --oneline --first-parent $BRANCH --not --remotes=origin`
    if [ "$LOG" == "" ]; then
      echo -e "\033[09;32m$BRANCH\033[00m (empty)"
      echo
    else
      echo -e "\033[01;32m$BRANCH\033[00m (not in upstream)"
      if [ $QUIET ]; then
        echo "`echo "$LOG" | wc -l` commit(s)"
      else
        echo "$LOG"
      fi
      echo
    fi
  elif [ "`git log origin/$BRANCH..$BRANCH 2>/dev/null`" != "" ]; then
    LOG=`git log --oneline --first-parent $BRANCH --not --remotes=origin`
    echo -e "\033[01;32m$BRANCH\033[00m"
    if [ $QUIET ]; then
      echo "`echo "$LOG" | wc -l` commit(s)"
    else
      echo "$LOG"
    fi
    echo
  elif [ "`git log origin/master..$BRANCH 2>/dev/null`" != "" ]; then
    FETCHERS="$FETCHERS $BRANCH"
  fi
done

if [ "$FETCHERS" != "" ]; then
  if [ ! $NO_FETCH ]; then
    if which git-list-pull-requests &>/dev/null; then
      git list-pull-requests -a >/tmp/.git-out-requests &
      PULLS=$!
    else
      echo >/tmp/.git-out-requests &
      PULLS=$!
    fi
    echo -n "`echo $FETCHERS | grep -oE '[^ ].*'`: fetching... "
    SUCCESS=
    wait $FETCHER
    clearLine
    FETCHED=1
  fi 
  for BRANCH in $FETCHERS; do
    if [ "`git log origin/master..$BRANCH 2>/dev/null`" != "" ]; then
      if [ ! $NO_FETCH ]; then
        wait $PULLS
        PULL_REQUESTS=`cat /tmp/.git-out-requests`
      fi
      if [ "`git log origin/master..$BRANCH 2>/dev/null`" != "" ]; then
        if [ ! $NO_FETCH ] && echo "$PULL_REQUESTS" | grep "^$BRANCH\$" > /dev/null; then
          echo -e "$BRANCH (in pull request)"
          git is-current -f -q $BRANCH
        else
          echo -e "\033[01;32m$BRANCH\033[00m (in upstream, not in master or beta)"
        fi
        echo
      fi
    fi
  done
fi
